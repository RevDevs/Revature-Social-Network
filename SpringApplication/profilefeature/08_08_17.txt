-Servlet-

SDLC- Software Devlopment Lifecycle
	Big bang- high management overhead
	Waterfall- sequential
	Iterative- more accomadating
	Spiral- sets of requirments
	Agile devlopment-
		user stories
		small units of work
		stories should depend on complete work
		stories should be ranked on difficulty
		burdown charts
		XP- extreme programming
	Scrum-
		1-3 week sprints
		each begins with planning for the sprint
		scrum master- tracks user stories
		stand-ups
	Kanban-
		longer sprints(swimlanes)
		user stories -> epics
		
XML- extensible markup language
	organized into 'nodes'
	markup plain text
	stroe and transport information
	designed to be both human and machine readable
	"well-formed": tags properly opened and closed
		-begin with xml declaration <xml......>
		unique root elements
		elements must be closed and properly nested
		attributes unless in "quotes"
	Example:
		<?XML version = "?">
		<!DOCTYPE notes SYSTEM "notes.dtd">
		<notes>
			<note>
				<to> 	Bob		</to>
				<from>	Sam		</from>
				<text>	Hello	</text>
			</note>
		</notes>
		notes.dtd
			<!ELEMENT note(to,from,text)
	DTD- Document Type Definition
		determines legal structure/elements
		mulitple users to argue on format
		ensures doc is valid (!= well formed)
	XSD- XML Schema Definition
		defines legal structure
		determines number, type, name of elements
		xml doc
		defines types (reusable object like structures)
		set default/fixed values
		.xsd

JAX P- Java API for XML(Parsing)
	DOM Parser
		Document Object Model
		Loads entire document to memory
			then creates a tree of elements
		Better for small files
		read/write
	SAX Parser
		Simple api for xml parsing
		xml streaming
		event based looking for beginning and end tags
		better for larger filesread only
	
JavaScript-
	C-family language
	scripting language/not compiled at start now it inbetween
		interpreted langauge, browser interprets line by line
	First mainstram lambda based language
		lambda: code as data, passing in functionality as a parameter
	Object oriented
		everything is an object(general containers)
		prototypal inherintance ->	object directly inherts from another
			method overloading, but no overriding
	loosely typed- declare variables without type
		var a =13, but var b="thirteen", but a={} 
		let or const, mor secure and better "types"
	Where to write it?
		in html
			with <script src="url"></script>, file or actual cdn/url
			or <script> ... </script>
				
	Datatypes:
		Numbers	64bit	float/floating point	non-accurate	"floating point error"
		String	16bit	"" or ' ', no char, immutable, .length
		boolean-	Falsey: false, null, undefined,0," ", NaN	Truthy:1, true,etc.
			null- nothing, can assign value as null
			undefined, default value for variables, function, nonexistant numbers
			NaN- not a number, but it is under type number
		objects- collection of name-value pairs
			name must be a string, but the value can be anything
	
	Type coercion
		interpretation of a variable as a variable of mattr
			arithmatic goes lef tot right intill string encountered
	
	Operators
		Arithmatic: + - * / % (beware)
		Comparison: == !== === == != > <
			equality: == != -> type coercion
			identity: ===, !== -> use this
		ternary: a? b : c
		bitwise: &, | >> <<,<<=, =>>
		logical: truthy vs falsey
		guard: &&
		default : ||
	
	Arrays
		let arr1 = [2,3,4]
		let arr1 = ["joe", 3, "cat", {}]
		indices are converted to strings and used as names
		arr1.1, arr[1]
		arr1.length
		let arr1=[]; arr1.length=0
		arr1[9] = "mouse; arr1.length = 10
		no need to specify length or type
		use for sequential integer
		
	Functions
		can be parsed or stored
		inherit from objectstore name value persist too
		function foo(){};
		const foo = function(){};
		no overloadingany number of parameters
		method: function as value in objects
	